StudentController.java


package com.example.demo.Controller;

import java.util.Arrays;
import java.util.List;

//import org.hibernate.query.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Entity.Student;
import com.example.demo.Entity.Student1;
import com.example.demo.repo.Student1Repo;
import com.example.demo.repo.StudentRepo;

@RestController
public class StudentController {
	@Autowired
	StudentRepo repo;
	@Autowired
	Student1Repo repo1;
	
	@GetMapping("/student")
	public List<Student> getAllstudents()
	{
		List<Student> student=repo.findAll();
		return student;
	}
	
	@GetMapping("/student/{id}")
	public Student getStudent(@PathVariable int id)
	{
		Student student=repo.findById(id).get();
		return student;
	}
	
	@PostMapping("/student/add")
	public void createStudent(@RequestBody Student student)
	{
		repo.save(student);
	}
	
	@PutMapping("/student/update/{id}")
	public Student update(@PathVariable int id,@RequestBody Student student) {
		Student exist=repo.findById(id).get();
		if(exist!=null)
		{
			exist.setName(student.getName());
			exist.setBranch(student.getBranch());
			exist.setPercentage(student.getPercentage());
			repo.save(exist);
		}
		return exist;
		
		
	}
	
	@DeleteMapping("student/delete/{id}")
	public void deleteStudent(@PathVariable int id) 
	{
		repo.deleteById(id);
	}
	
	
	@GetMapping("/student/branch-and-name/{branch}/{name}")
	public List<Student> getAllBranchAndName(@PathVariable String branch, @PathVariable String name )
	{
		return repo.findAllByBranchAndName(branch,name);
	}
	
	@GetMapping("/student/branch-or-name/{name}/{branch}")
	public List<Student> getStudentsByNameOrBranch(@PathVariable String name, @PathVariable String branch )
	{
		return repo.findAllByNameOrBranch(name,branch);
	}
	
	@GetMapping("/student/branch-in/{branches}")
	public List<Student> getStudentsByBranchIn(@PathVariable String branches )
	{
		List<String> branchList=Arrays.asList(branches.split("-"));
		return repo.findAllByBranchIn(branchList);
	}
	
	
	@GetMapping("/students/pagination")
	public ResponseEntity<Page<Student>>getAllStudentsWithPagination(
			@RequestParam(defaultValue="3")int page,
			@RequestParam(defaultValue="10")int size){
		PageRequest pageable=PageRequest.of(page, size);
		Page<Student>students=repo.findAll(pageable);
		return ResponseEntity.ok(students);
	}
	
	@GetMapping("/students/sort")
	public List<Student> Sorting(){
		return repo.findAll(Sort.by(Sort.Direction.ASC,"name"));
	}
	
	@GetMapping("/students/sorted")
	public List<Student> Sortings(){
		return repo.findAll(Sort.by(Sort.Direction.DESC,"name"));
	}
	
	@GetMapping("/students/findlast/{name}")
	public List<Student> findlast(@PathVariable String name){
		return repo.findLastByNameContaining(name);
	}
	
	@GetMapping("/students/findfirst/{name}")
	public List<Student> findfirst(@PathVariable String name){
		return repo.findAllFirstByNameContaining(name);
	}
	
	
	@DeleteMapping("/RollNo/{rollno}")
	public void deleteStudentByRollno(@PathVariable int rollno)
	{
		repo.deleteStudentByRollno(rollno);
	}
	
	@PutMapping("/students/updateName/{rollno}/{name}")
			public void updateStudentName(@PathVariable int rollno,@PathVariable String name) {
		repo.updateStudentNameByRollno(name,rollno);
	}
	
	
	@GetMapping("/students/percentage-range")
	public List<Student> findStudentPercentageRange(@RequestParam("minPercentage") float minPercentage,@RequestParam("maxPercentage") float maxPercentage)
	{
		return repo.findStudentByPercentageRange(minPercentage,maxPercentage);
	}
		
	
	@GetMapping ("/students/sorted-by-percentage")
	public ResponseEntity<List<Student>> getStudentSortedByPercentage(){
		List<Student> students=repo.findStudentsOrderByPercentage();
		return ResponseEntity.ok(students);
	}
	
	@PostMapping("/student/create")
	public ResponseEntity<String> createStudent1(@RequestBody Student student) {
		if(student.getStudent1() == null) {
			return ResponseEntity.badRequest().body("Student1 data is required.");
		}
		
		Student1 student1 = (Student1) student.getStudent1();
		
		student.setStudent1(student1);
		student1.setStudent(student);
		
		repo.save(student);
		repo1.save(student1);
		
		return ResponseEntity.status(HttpStatus.CREATED).body("Student and Student1 created successfully");
		
	}
	
	
	
	

}
....................................................

Student.java

package com.example.demo.Entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

@Entity
@Table(name="student")
public class Student {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int rollno;
	private String name;
	private float percentage;
	private String branch;
	@Transient
	private String fullname;
	
	@OneToOne(cascade=CascadeType.ALL)
	private Student1 student1;
	
	public Student1 getStudent1() {
		return student1;
	}
	public void setStudent1(Student1 student1) {
		this.student1 = student1;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public float getPercentage() {
		return percentage;
	}
	public void setPercentage(float percentage) {
		this.percentage = percentage;
	}
	public String getBranch() {
		return branch;
	}
	public void setBranch(String branch) {
		this.branch = branch;
	}
	public String getFullname() {
		return fullname;
	}
	public void setFullname(String fullname) {
		this.fullname = fullname;
	}
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public Student() {
		// TODO Auto-generated constructor stub
	}
	public Student(String name, float percentage, String branch, String fullname) {
		super();
		this.name = name;
		this.percentage = percentage;
		this.branch = branch;
		this.fullname = fullname;
	}
	@Override
	public String toString() {
		return "Student [rollno=" + rollno + ", name=" + name + ", percentage=" + percentage + ", branch=" + branch
				+ ", fullname=" + fullname + "]";
	}
}
........................................
Student1.java

package com.example.demo.Entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

@Entity
@Table(name="student2")
public class Student1 {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int rollno;
	private double salary;
	private String city;
	private String mailid;
	private int experience;

	
	@OneToOne
	@JoinColumn(name="student_rollno",referencedColumnName="rollno")
	private Student student;
	
	
	public Student getStudent() {
		return student;
	}
	public void setStudent(Student student) {
		this.student = student;
	}
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getMailid() {
		return mailid;
	}
	public void setMailid(String mailid) {
		this.mailid = mailid;
	}
	public int getExperience() {
		return experience;
	}
	public void setExperience(int experience) {
		this.experience = experience;
	}
	@Override
	public String toString() {
		return "Student1 [rollno=" + rollno + ", salary=" + salary + ", city=" + city + ", mailid=" + mailid
				+ ", experience=" + experience + "]";
	}
	public Student1(double salary, String city, String mailid, int experience) {
		super();
		this.salary = salary;
		this.city = city;
		this.mailid = mailid;
		this.experience = experience;
	}
	public Student1() {
		super();
		// TODO Auto-generated constructor stub
	}
	
}
..............................................
Stuednt1Repo.java

package com.example.demo.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.Entity.Student1;

public interface Student1Repo extends JpaRepository<Student1, Integer> {

}

..................................................
StudentRepo.java

package com.example.demo.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.demo.Entity.Student;

public interface StudentRepo extends JpaRepository<Student, Integer> {

	List<Student> findAllByBranchAndName(String branch, String name);

	

	List<Student> findAllByNameOrBranch(String name, String branch);



	List<Student> findAllByBranchIn(List<String> branchList);


List<Student> findLastByNameContaining(String name);


List<Student> findAllFirstByNameContaining(String name);

@Modifying
@Transactional
@Query("delete from Student s where s.rollno=:rollno")
void deleteStudentByRollno(int rollno);



@Modifying
@Transactional
@Query("update Student s set s.name=:name where s.rollno=:rollno")
void updateStudentNameByRollno(String name, int rollno);




@Query("select s from Student s where s.percentage>=:minPercentage and s.percentage<=:maxPercentage")
List <Student> findStudentByPercentageRange(@Param("minPercentage") float minPercentage,@Param("maxPercentage") float maxPercentage);


@Query("select s from Student s order by s.percentage desc")
List<Student> findStudentsOrderByPercentage();

}
..........................................

application.properties

spring.application.name=SpringBootRestAPIProject
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/studentdatabase
spring.datasource.username=root
spring.datasource.password=varshu@0503
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

................................................

pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.programming.restapi</groupId>
	<artifactId>SpringBootRestAPIProject</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootRestAPIProject</name>
	<description>create the googlemap</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.3.0</version>
   </dependency>
   <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
      <version>2.3.0</version>
   </dependency>
   <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
      <version>2.3.0</version>
   </dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
.....................................................................